# Generated by Django 5.1.3 on 2024-11-23 18:01

import api.models
import django.contrib.auth.models
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('c_id', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.CharField(max_length=50, unique=True, validators=[api.models.email_validator])),
                ('password', models.CharField(max_length=12, validators=[django.core.validators.RegexValidator(message='Password must be 8-12 characters long and contain only valid characters.', regex='^[a-zA-Z0-9!@#$%^&*()_+\\-=\\[\\]{};\\\':",.<>\\/?]{8,12}$')])),
                ('firstname', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Name must contain only Greek letters.', regex='^[Α-ΩΆΈΉΊΌΎΏα-ωάέήίόύώ]*$')])),
                ('lastname', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Name must contain only Greek letters.', regex='^[Α-ΩΆΈΉΊΌΎΏα-ωάέήίόύώ]*$')])),
                ('tel', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(message='Telephone number must contain only digits.', regex='^[0-9]+$')])),
            ],
            options={
                'db_table': 'Client',
                'constraints': [models.CheckConstraint(condition=models.Q(('password__regex', '^[a-zA-Z0-9!@#$%^&*()_+\\-=\\[\\]{};\\\':",.<>\\/?]{8,12}$')), name='chk_password'), models.CheckConstraint(condition=models.Q(('firstname__regex', '^[Α-ΩΆΈΉΊΌΎΏα-ωάέήίόύώ]*$')), name='chk_firstname'), models.CheckConstraint(condition=models.Q(('lastname__regex', '^[Α-ΩΆΈΉΊΌΎΏα-ωάέήίόύώ]*$')), name='chk_lastname'), models.CheckConstraint(condition=models.Q(('tel__regex', '^[0-9]+$')), name='chk_tel')],
            },
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('s_id', models.AutoField(primary_key=True, serialize=False)),
                ('s_email', models.CharField(max_length=40, unique=True)),
                ('s_password', models.CharField(max_length=12, validators=[django.core.validators.RegexValidator(message='Password must be 8-12 characters long and contain only valid characters.', regex='^[a-zA-Z0-9!@#$%^&*()_+\\-=\\[\\]{};\\\':",.<>\\/?]{8,12}$')])),
                ('s_firstname', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Name must contain only Greek letters.', regex='^[Α-ΩΆΈΉΊΌΎΏα-ωάέήίόύώ]*$')])),
                ('s_lastname', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Name must contain only Greek letters.', regex='^[Α-ΩΆΈΉΊΌΎΏα-ωάέήίόύώ]*$')])),
                ('s_tel', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(message='Telephone number must contain only digits.', regex='^[0-9]+$')])),
                ('salary', models.IntegerField()),
                ('job_descr', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Invalid job description', regex='^(Reception|Administrator|Programmer)$')])),
                ('date_of_joining', models.DateField()),
            ],
            options={
                'db_table': 'Staff',
                'constraints': [models.CheckConstraint(condition=models.Q(('s_email__regex', '^[^@]+@hoteldmd\\.gr$')), name='chk_s_email'), models.CheckConstraint(condition=models.Q(('s_password__regex', '^[a-zA-Z0-9!@#$%^&*()_+\\-=\\[\\]{};\\\':",.<>\\/?]{8,12}$')), name='chk_s_password'), models.CheckConstraint(condition=models.Q(('s_firstname__regex', '^[Α-ΩΆΈΉΊΌΎΏα-ωάέήίόύώ]*$')), name='chk_s_firstname'), models.CheckConstraint(condition=models.Q(('s_lastname__regex', '^[Α-ΩΆΈΉΊΌΎΏα-ωάέήίόύώ]*$')), name='chk_s_lastname'), models.CheckConstraint(condition=models.Q(('s_tel__regex', '^[0-9]+$')), name='chk_s_tel'), models.CheckConstraint(condition=models.Q(('job_descr__in', ['Reception', 'Administrator', 'Programmer'])), name='chk_job_descr')],
            },
        ),
    ]
